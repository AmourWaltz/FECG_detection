import osimport wfdbimport numpy as npfrom scipy import signalfrom numpy import linalg as laimport matplotlib.pyplot as pltfile_Path = '/Users/collcertaye/WorkSpace/Laboratory_FECG/FECG_2013DB/set-a'file_Name = 'a03'# signal filter before ICAdef signal_filter(mix_signal):    # sample frequency: 1000 Hz, cut-off frequency: 3.17 Hz    # wf = 1000    # w0 = 3.17    # wn = w0 / wf    # for each ECG channel a median filtering with a 60ms window was applied    # sample frequency: 1000 Hz    filted_data = mix_signal    filted_data = signal.medfilt(filted_data, 3)    # the baseline signal was computed applying a low pass first order Butterwort filter in forwad    # and backward direction to avoid phase distortion(cut off frequence at 3.17Hz)    # b, a = signal.butter(1, wn, btype='low', analog=False, output='ba')    # filted_data = signal.filtfilt(b, a, filted_data)    # a notch filter(forward-backward,zero phase,1 Hz bandwidth) was applied    # to remove its characteristic frequency and its next three harmonics    # quality = 30    # b, a = signal.iirnotch(0.1, quality)    # filted_data = signal.filtfilt(b, a, filted_data)    return filted_data# fast_ica algorithmdef fast_ica(mix_signal):    channel, length = mix_signal.shape    print(channel, length)    average = np.mean(mix_signal, axis=1)    for loop_i in range(channel):        mix_signal[loop_i, :] = mix_signal[loop_i, :] - average[loop_i]        pass    covx = np.cov(mix_signal)    value, eigvector = np.linalg.eig(covx)    val = value ** (-1 / 2) * np.eye(channel, dtype=float)    white = np.dot(val, eigvector.T)    matrix_z = np.dot(white, mix_signal)    maxcount = 10000    critical = 0.00001    weight = 0.5 * np.ones([channel, channel])    for loop_i in range(channel):        count = 0        weight_p = weight[:, loop_i].reshape(channel, 1)        last_wp = np.zeros(channel).reshape(channel, 1)        while la.norm(weight_p - last_wp, 1) > critical:            # print(count," loop :",la.norm(weight_p-last_wp, 1))            count = count + 1            last_wp = np.copy(weight_p)            gx = np.tanh(last_wp.T.dot(matrix_z))            for loop_j in range(channel):                tm1 = np.mean(matrix_z[loop_j, :] * gx)                tm2 = np.mean(1 - gx ** 2) * last_wp[loop_j]                weight_p[loop_j] = tm1 - tm2                pass            pass            # print(" wp :", weight_p.T )            weight_pp = np.zeros(channel)            for loop_j in range(loop_i):                weight_pp = weight_pp + weight_p.T.dot(weight[:, loop_j]) * weight[:, loop_j]                pass            pass            weight_p.shape = 1, channel            weight_p = weight_p - weight_pp            weight_p.shape = channel, 1            weight_p = weight_p / (la.norm(weight_p))            if count == maxcount:                print("reach Maxcountï¼Œexit loop", la.norm(weight_p - last_wp, 1))                break            pass        # print("loop count:", count)        weight[:, loop_i] = weight_p.reshape(channel, )        pass    pass    source_signal = weight.T.dot(matrix_z)    return source_signal# figure ecg waveformdef figure_out(ventricular_signal, filted_signal, signal_annotation):    # draw index of annatations onto the diagram    plt.figure(num=1, figsize=(20, 16), dpi=60)    plt.subplot(811)    plt.plot(ventricular_signal[:, 0])    for index in signal_annotation.sample:        # print(index)        plt.scatter(x=index, y=ventricular_signal[index, 0], marker="*")        pass    pass    plt.subplot(812)    plt.plot(ventricular_signal[:, 1])    for index in signal_annotation.sample:        plt.scatter(x=index, y=ventricular_signal[index, 1], marker="*")        pass    pass    plt.subplot(813)    plt.plot(ventricular_signal[:, 2])    for index in signal_annotation.sample:        plt.scatter(x=index, y=ventricular_signal[index, 2], marker="*")        pass    pass    plt.subplot(814)    plt.plot(ventricular_signal[:, 3])    for index in signal_annotation.sample:        plt.scatter(x=index, y=ventricular_signal[index, 3], marker="*")        pass    pass    plt.subplot(815)    plt.plot(filted_signal[:, 0])    # for index in signal_annotation.sample:    #     plt.scatter(x=index, y=filted_signal[index, 0], marker="*")    #     pass    # pass    plt.subplot(816)    plt.plot(filted_signal[:, 1])    # for index in signal_annotation.sample:    #     plt.scatter(x=index, y=filted_signal[index, 1], marker="*")    #     pass    # pass    plt.subplot(817)    plt.plot(filted_signal[:, 2])    # for index in signal_annotation.sample:    #     plt.scatter(x=index, y=filted_signal[index, 2], marker="*")    #     pass    # pass    plt.subplot(818)    plt.plot(filted_signal[:, 3])    # for index in signal_annotation.sample:    #     plt.scatter(x=index, y=filted_signal[index, 3], marker="*")    #     pass    # pass    plt.show()    pass# read the ecg datadef read_data():    record = wfdb.rdrecord(os.path.join(file_Path, file_Name), sampfrom=0, sampto=10000,                           physical=True, channels=[0, 1, 2, 3])    signal_annotation = wfdb.rdann(os.path.join(file_Path, file_Name), "atr", sampfrom=0, sampto=4000)    ventricular_signal = record.p_signal[0:4000, :]    filted_signal = np.zeros_like(ventricular_signal)    print(filted_signal.shape, ventricular_signal.shape)    for loop_i in range(ventricular_signal.shape[1]):        filted_signal[:, loop_i] = signal_filter(ventricular_signal[:, loop_i])        pass    filted_signal = filted_signal.transpose((1, 0))    source_signal = fast_ica(filted_signal)    source_signal = source_signal.transpose((1, 0))    figure_out(ventricular_signal, source_signal, signal_annotation)    passread_data()